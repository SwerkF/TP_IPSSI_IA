import streamlit as st
from PIL import Image
import os
import tensorflow as tf  # Pour charger les mod√®les TensorFlow
from tensorflow.keras import models  # Pour charger les mod√®les .keras
import pickle  # Pour charger les mod√®les scikit-learn sauvegard√©s en .pkl
import joblib  # Pour charger les mod√®les scikit-learn en utilisant joblib
import torch  # Pour charger les mod√®les PyTorch
import torch.nn as nn  # Pour d√©finir et utiliser le mod√®le CNN PyTorch
import numpy as np  # Pour travailler avec des matrices d'image
import pandas as pd

# D√©finir le mod√®le CNN pour PyTorch
class CNNModel(nn.Module):
    def __init__(self):
        super(CNNModel, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(32, 64, kernel_size=3),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(64, 128, kernel_size=3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )
        
        # Calculer la taille d'entr√©e pour la couche dense
        with torch.no_grad():
            dummy_input = torch.zeros(1, 3, 224, 224)
            output_size = self.features(dummy_input).view(-1).shape[0]
        
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(output_size, 128),
            nn.ReLU(),
            nn.Linear(128, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x

# Configuration de la page Streamlit (unique, doit √™tre la premi√®re commande)
st.set_page_config(
    page_title="D√©tection du Cancer de la Peau",
    page_icon="üè•",
    layout="wide"
)

# Barre lat√©rale pour la navigation entre les pages
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Choisissez une page", ["Accueil", "Analyse Exploratoire des Donn√©es", "Faire une Pr√©diction", "Benchmark des Mod√®les"])

# Liste des mod√®les disponibles pour la pr√©diction (pour la page "Faire une Pr√©diction")
model_dir = './saved_models'
models_available = [f for f in os.listdir(model_dir) if f.endswith(('.keras', '.pkl', '.pth'))]

# Page d'accueil
if page == "Accueil":
    st.title("üè• Pr√©dire un cancer de la peau avec une image")

    # Introduction du projet
    st.markdown("""
    ### Introduction du projet üè•

    Ce projet a √©t√© d√©velopp√© dans le cadre du **cours d'analyse de donn√©es pour une IA**, afin de mettre en pratique les concepts de **deep learning** et de **machine learning**. L'objectif est de cr√©er un **outil accessible** qui permet de d√©tecter les signes pr√©coces de **cancer de la peau** √† partir d'une simple image de la l√©sion cutan√©e. En utilisant des mod√®les avanc√©s, nous souhaitons non seulement aider √† la sensibilisation sur les risques potentiels des l√©sions cutan√©es, mais aussi acqu√©rir des comp√©tences en d√©veloppement de mod√®les IA appliqu√©s.

    ### Mod√®les Utilis√©s
    Pour ce projet, nous avons mis en place et test√© plusieurs mod√®les de r√©seaux de neurones avanc√©s, parmi lesquels :

    - **VGG16** : Mod√®le pr√©-entra√Æn√© pour la classification d'images.
    - **ResNet50** : R√©seau r√©sidu profond permettant de travailler sur des architectures complexes.
    - **EfficientNetB0** : Mod√®le moderne, √©quilibrant pr√©cision et efficacit√© des calculs.
    - **MLP (Perceptron multicouche)** : Pour servir de baseline et comparer avec des mod√®les plus avanc√©s.
    - **CNN PyTorch** et un **mod√®le TensorFlow personnalis√©** pour plus de flexibilit√©.

    ### Comment Utiliser l'Application
    Pour utiliser cette application, c'est simple :
    1. **Naviguez vers la page "Faire une Pr√©diction"** en utilisant la barre lat√©rale.
    2. **Choisissez un mod√®le** parmi ceux disponibles (par exemple, VGG16, ResNet50).
    3. **T√©l√©chargez une image** de la l√©sion cutan√©e que vous souhaitez analyser.
    4. Obtenez une pr√©diction indiquant si la l√©sion est probablement **b√©nigne** ou **maligne**.
    """)

# Page d'analyse exploratoire des donn√©es
elif page == "Analyse Exploratoire des Donn√©es":
    st.title("üìä Analyse et Visualisation avec un Arbre de D√©cision")

    st.markdown("""
        Ce projet d√©montre l'utilisation d'un mod√®le **Arbre de D√©cision** et **For√™t Al√©atoire** pour analyser un dataset li√© aux maladies de la peau. L'objectif est d'identifier les variables les plus importantes et de trouver des mod√®les efficaces pour pr√©dire si une personne a eu un cancer de la peau (`HadSkinCancer`).

        ## **1. Explication du Code**

        Le projet utilise Python avec des biblioth√®ques comme `scikit-learn` et `matplotlib`. Voici les √©tapes principales :

        ### **√âtapes dans le Code**

        1. **Chargement des donn√©es :**
        - Le dataset est charg√© √† partir d'un fichier Excel.
        - La colonne cible est `HadSkinCancer`, qui indique si une personne a eu un cancer de la peau.

        2. **Pr√©traitement des donn√©es :**
        - Les fonctions `preprocess_data` et `clean_data` sont utilis√©es pour nettoyer et encoder les variables cat√©goriques.

        3. **Matrice de corr√©lation :**
        - Une matrice de corr√©lation est calcul√©e pour visualiser les relations entre toutes les variables, y compris la cible (`HadSkinCancer`).

        4. **S√©paration des donn√©es :**
        - Les donn√©es sont divis√©es en un ensemble d'entra√Ænement (80%) et un ensemble de test (20%).

        5. **Entra√Ænement et √©valuation des mod√®les :**
        - **Arbre de D√©cision :** Une boucle teste des mod√®les d'Arbre de D√©cision avec des profondeurs variant de 1 √† 20.
            - Les m√©triques suivantes sont calcul√©es : pr√©cision (train et test), √©cart de pr√©cision (*Accuracy Gap*), taille de l'arbre.
        - **For√™t Al√©atoire :** Un mod√®le avec plusieurs arbres est entra√Æn√© pour comparer ses performances √† celles de l'Arbre de D√©cision.

        6. **Visualisations g√©n√©r√©es :**
        - **Matrice de corr√©lation** : Relations entre les variables.
        - **Meilleur arbre** : Visualisation de l'arbre pour la profondeur optimale.
        - **Importances des caract√©ristiques** : Variables ayant le plus d'influence dans les pr√©dictions (pour les deux mod√®les).
        - **Courbes ROC** : Capacit√© des mod√®les √† distinguer les classes.
        - **Analyse des pr√©cisions** : Comparaison des pr√©cisions d'entra√Ænement et de test pour l'Arbre de D√©cision.

        ## **2. Interpr√©tation des R√©sultats**

        ### **Graphique 1 : Train vs Test Accuracy and Accuracy Gap**
    """)
    image1 = Image.open("data/images/accuracy_gap_analysis.png")
    st.image(image1, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** : 
            - La pr√©cision d'entra√Ænement augmente avec la profondeur, tandis que la pr√©cision de test se stabilise pour des profondeurs entre 5 et 10.
            - L'√©cart de pr√©cision (*Accuracy Gap*) reste faible pour des profondeurs mod√©r√©es mais augmente pour des arbres plus profonds.
        - **Interpr√©tation** :
            - Les arbres profonds tendent √† sur-apprendre (*overfitting*), ce qui r√©duit leur capacit√© √† g√©n√©raliser sur de nouvelles donn√©es.

        ### **Graphique 2 : Visualisation du Meilleur Arbre**
    """)
    image2 = Image.open("data/images/best_decision_tree_visualization.png")
    st.image(image2, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** :
            - L‚Äôarbre montre que les premi√®res d√©cisions sont principalement bas√©es sur `AgeCategory`, suivi de `EthnicityCategory`.
            - Les n≈ìuds sup√©rieurs divisent les donn√©es en groupes significatifs, maximisant la s√©paration entre les classes.
            - **Interpr√©tation d√©taill√©e** :
            - **Crit√®res de d√©cision (n≈ìuds sup√©rieurs)** :
                - L'utilisation de `AgeCategory` en haut de l‚Äôarbre refl√®te son r√¥le dominant dans la pr√©diction. Par exemple :
                - Si une personne est dans une cat√©gorie d'√¢ge avanc√©, le mod√®le peut pr√©dire avec une grande probabilit√© la pr√©sence d'un risque accru.
                - `EthnicityCategory`, souvent utilis√© dans les premiers n≈ìuds, divise les individus en fonction de leur sensibilit√© aux dommages UV.
            - **D√©cisions fines (n≈ìuds inf√©rieurs)** :
                - Les caract√©ristiques comme `AlcoholDrinkers` ou `BMI`, bien que moins importantes globalement, sont utilis√©es pour affiner les pr√©dictions dans des sous-groupes sp√©cifiques.
            - **Feuilles de l'arbre** :
                - Les probabilit√©s pr√©sentes aux feuilles permettent d'identifier la classe pr√©dite (cancer de la peau ou non) ainsi que le degr√© de certitude de la pr√©diction.
            - **Explication contextuelle** :
            - Cet arbre de d√©cision met en lumi√®re les relations cl√©s dans les donn√©es et peut √™tre utilis√© pour :
                - Identifier rapidement les groupes √† haut risque.
                - √âlaborer des strat√©gies cibl√©es, comme des campagnes de d√©pistage adapt√©es aux profils les plus vuln√©rables.


            ### **Graphique 3 : Importances des Caract√©ristiques (Profondeur Optimale)**
    """)
    image3 = Image.open("data/images/feature_importances_best_depth.png")
    st.image(image3, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** :
            - `AgeCategory` est la variable la plus influente, suivie de `EthnicityCategory`. Les autres caract√©ristiques, comme `BMI` et `AlcoholDrinkers`, ont un impact limit√©.
            - **Interpr√©tation d√©taill√©e** :
            - **AgeCategory (importance √©lev√©e)** :
                - L‚Äô√¢ge est un facteur critique dans les maladies de la peau, notamment le cancer de la peau, car :
                - L‚Äôexposition cumulative au soleil au fil des ans augmente les risques.
                - Les processus biologiques li√©s au vieillissement r√©duisent les capacit√©s de r√©paration de l‚ÄôADN apr√®s des dommages caus√©s par les UV.
                - Les groupes d'√¢ge plus avanc√©s sont plus fr√©quemment diagnostiqu√©s avec des cancers de la peau dans les √©tudes √©pid√©miologiques.
            - **EthnicityCategory (importance √©lev√©e)** :
                - L‚Äôethnicit√© joue un r√¥le cl√©, car :
                - Les personnes ayant une peau plus claire ont g√©n√©ralement une concentration plus faible de m√©lanine, ce qui les rend plus vuln√©rables aux dommages UV.
                - Les diff√©rences dans les comportements culturels, comme la protection solaire ou les habitudes d'exposition, peuvent √©galement influencer ce facteur.
            - **AlcoholDrinkers et BMI (importance mod√©r√©e)** :
                - Bien que ces variables aient une importance moindre, elles peuvent refl√©ter des comportements li√©s √† la sant√© globale :
                - Une consommation excessive d'alcool peut affaiblir le syst√®me immunitaire et r√©duire la capacit√© √† r√©parer les cellules endommag√©es.
                - L‚Äôindice de masse corporelle (BMI) est parfois li√© √† des comportements de sant√© globaux (par exemple, l'activit√© physique et l'exposition au soleil).
            - **Explication contextuelle** :
            - Ces r√©sultats confirment des tendances bien document√©es dans les recherches m√©dicales.

        ### **Graphique 4 : Importances des Caract√©ristiques (Profondeur = 9)**
    """)
    image4 = Image.open("data/images/feature_importances_depth_9.png")
    st.image(image4, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** :
            - Les tendances sont similaires √† celles de la profondeur optimale.
        - **Interpr√©tation** :
            - Une profondeur de 9 est coh√©rente avec le meilleur mod√®le et offre un bon √©quilibre entre performance et simplicit√©.


        ### **Graphique 5 : Courbes ROC**
    """)
    image5 = Image.open("data/images/roc_curve.png")
    image5_1 = Image.open("data/images/rf_roc_curve.png")
    st.image(image5, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.image(image5_1, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** :
            - L'AUC pour la For√™t Al√©atoire est l√©g√®rement meilleure que celle de l'Arbre de D√©cision.
        - **Interpr√©tation** :
            - La For√™t Al√©atoire offre une meilleure capacit√© de discrimination entre les classes.

        ### **Graphique 6 : Matrice de Corr√©lation**
    """)
    image6 = Image.open("data/images/correlation_matrix_with_target.png")
    st.image(image6, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** :
            - `AgeCategory` et `EthnicityCategory` montrent des corr√©lations significatives avec la cible `HadSkinCancer`.
        - **Interpr√©tation** :
            - Ces relations confirment les r√©sultats des mod√®les, mettant en avant leur pertinence pour pr√©dire le cancer de la peau.

        ### **Tableau r√©capitulatif des r√©sultats**
    """)

    image7 = Image.open("data/images/decision_tree_summary_table.png")
    st.image(image7, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)
    st.markdown("""
        - **Observation** :
            - Une profondeur de 5 offre une pr√©cision optimale avec un √©cart de pr√©cision minimal.
        - **Interpr√©tation** :
            - Les profondeurs sup√©rieures √† 10 n'apportent pas de gains significatifs et augmentent le risque de sur-apprentissage.
    """)


# Page pour faire une pr√©diction
elif page == "Faire une Pr√©diction":
    st.title("üîç Faire une Pr√©diction")

    # V√©rifier s'il y a des mod√®les disponibles
    if not models_available:
        st.error("‚ö†Ô∏è Aucun mod√®le disponible. Veuillez ajouter des mod√®les dans le dossier 'saved_models'.")
        st.stop()

    # √âtape 1 : S√©lection du mod√®le
    st.markdown("## üìå √âtape 1 : S√©lectionner un mod√®le")
    st.info("S√©lectionnez le mod√®le que vous souhaitez utiliser pour l'analyse des l√©sions cutan√©es.")
    selected_model = st.selectbox(
        "Mod√®les disponibles :", 
        models_available,
        help="Choisissez un mod√®le pr√©-entra√Æn√© pour analyser l'image.",
    )

    # Charger le mod√®le s√©lectionn√©
    def load_selected_model(model_path):
        try:
            if model_path.endswith('.keras'):
                # Load a TensorFlow model
                model = models.load_model(model_path)
                return model, "tensorflow"
            elif model_path.endswith('.pkl'):
                # Load a scikit-learn model (pkl)
                with open(model_path, 'rb') as file:
                    try:
                        model = pickle.load(file)
                    except Exception:
                        model = joblib.load(model_path)  # Load with joblib if pickle fails
                return model, "mlp"
            elif model_path.endswith('.pth'):
                # Load a PyTorch model
                model = CNNModel()
                model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))  # Load to CPU
                model.eval()  # Set the model to evaluation mode
                return model, "pytorch"
            else:
                st.error("Unsupported model format.")
                st.stop()
        except Exception as e:
            st.error(f"Error loading model: {e}")
            st.stop()

    model_path = os.path.join(model_dir, selected_model)
    with st.spinner(f"Chargement du mod√®le {selected_model}..."):
        model, model_type = load_selected_model(model_path)
    st.success(f"Mod√®le charg√© : {selected_model} (Type : {model_type})")

    # √âtape 2 : T√©l√©chargement de l'image
    st.markdown("## üìå √âtape 2 : T√©l√©charger une image")
    st.info("Veuillez t√©l√©charger une image de la l√©sion cutan√©e √† analyser. L'image doit √™tre au format **JPEG** ou **PNG**.")
    uploaded_file = st.file_uploader(
        "Choisissez une image de l√©sion cutan√©e :", 
        type=["jpg", "jpeg", "png"],
        help="T√©l√©chargez une image de la peau au format JPG, JPEG ou PNG pour effectuer une pr√©diction.",
    )

    # Fonction de pr√©diction
    def predict_image(file, model, model_type):
        if model_type == "tensorflow":
            # Pr√©parer l'image pour le mod√®le TensorFlow
            img = Image.open(file).resize((224, 224))
            img_array = np.array(img) / 255.0  # Normalisation de l'image
            img_array = np.expand_dims(img_array, axis=0)  # Ajouter une dimension de batch
            prediction = model.predict(img_array)
            return "Malignant" if prediction[0][0] > 0.5 else "Benign"
        elif model_type == "mlp":
            # Pr√©parer l'image pour le mod√®le MLP (scikit-learn)
            img = Image.open(file).resize((50, 50))  # Redimensionner pour MLP
            img_array = np.array(img).flatten().reshape(1, -1)  # Aplatir pour MLP
            prediction = model.predict(img_array)
            return "Malignant" if prediction[0] == 1 else "Benign"
        elif model_type == "pytorch":
            # Pr√©parer l'image pour le mod√®le PyTorch
            img = Image.open(file).resize((224, 224))
            img_array = np.array(img).transpose((2, 0, 1)) / 255.0  # Convertir √† un format CxHxW
            img_tensor = torch.Tensor(img_array).unsqueeze(0)  # Ajouter une dimension de batch
            with torch.no_grad():
                prediction = model(img_tensor)
            return "Malignant" if prediction.item() > 0.5 else "Benign"

    if uploaded_file:
        # Afficher l'image t√©l√©charg√©e
        st.markdown("### üñºÔ∏è Image t√©l√©charg√©e")
        image = Image.open(uploaded_file)
        st.image(image, caption="Image t√©l√©charg√©e √† analyser", use_container_width=True)

        # √âtape 3 : R√©sultat de la pr√©diction
        st.markdown("## üìå √âtape 3 : R√©sultat de la pr√©diction")
        with st.spinner("üß™ Analyse en cours..."):
            # Faire la pr√©diction
            prediction = predict_image(uploaded_file, model, model_type)

        # Afficher le r√©sultat de la pr√©diction
        if prediction == "Benign":
            st.success("‚úÖ R√©sultat : La l√©sion semble **B√âNIGNE**.")
            st.markdown("### Recommandation :")
            st.write("Cela semble √™tre une l√©sion b√©nigne. Toutefois, si vous avez des pr√©occupations, veuillez consulter un professionnel de sant√©.")
        else:
            st.error("‚ö†Ô∏è R√©sultat : La l√©sion pourrait √™tre **MALIGNE**.")
            st.markdown("### Recommandation :")
            st.write("Veuillez **consulter un professionnel de sant√©** pour un diagnostic plus approfondi.")

# Page pour le benchmark des mod√®les
elif page == "Benchmark des Mod√®les":
    st.title("üìä Benchmark des Mod√®les")

    st.markdown("""
    Cette page compare les performances des diff√©rents mod√®les utilis√©s pour la d√©tection du cancer de la peau.
    
    ## Comparaison des R√©sultats des Mod√®les
    Les tableaux et graphiques ci-dessous montrent les performances (accuracy, AUC, temps d'entra√Ænement, etc.) de chaque mod√®le.
    """)

    # Ajouter une visualisation de type tableau pour comparer les performances des mod√®les
    benchmark_results = {
        "Mod√®le": ["VGG", "ResNet", "EfficientNet", "MLP", "Sequential"],
        "Accuracy": [0.85, 0.87, 0.86, 0.78, 0.79],
        "Training Time (seconds)": [300, 350, 280, 100, 150],
        "AUC": [0.87, 0.88, 0.85, 0.76, 0.80]
    }

    benchmark_df = pd.DataFrame(benchmark_results)
    st.dataframe(benchmark_df)

    # Graphique pour comparer les accuracy des mod√®les
    st.markdown("### Comparaison de l'Accuracy des Mod√®les")
    st.bar_chart(benchmark_df.set_index("Mod√®le")["Accuracy"])

    # Graphique pour comparer le temps d'entra√Ænement
    st.markdown("### Temps d'Entra√Ænement des Mod√®les")
    st.bar_chart(benchmark_df.set_index("Mod√®le")["Training Time (seconds)"])

    # Afficher des barres de progression pour les performances
    st.markdown("### Visualisation des Performances des Mod√®les")
    for index, row in benchmark_df.iterrows():
        st.markdown(f"**{row['Mod√®le']}**")
        percentage = int(row['Accuracy'] * 100)
        st.progress(percentage)
        st.write(f"Accuracy: {percentage}%")


    curve_dir = './training_curves'
    model_names = ["VGG", "ResNet", "EfficientNet", "Sequential"]

    for model_name in model_names:
        accuracy_curve_path = os.path.join(curve_dir, f"{model_name}_accuracy_curve.png")
        loss_curve_path = os.path.join(curve_dir, f"{model_name}_loss_curve.png")

        if os.path.exists(accuracy_curve_path) and os.path.exists(loss_curve_path):
            st.markdown(f"#### Courbes d'Apprentissage pour le Mod√®le {model_name}")
            st.image(accuracy_curve_path, caption=f"Courbe d'Accuracy - {model_name}", use_container_width=True)
            st.image(loss_curve_path, caption=f"Courbe de Loss - {model_name}", use_container_width=True)

    # Courbes d'apprentissage pour chaque mod√®le
    st.markdown("### Courbes d'Apprentissage des Mod√®les")
    st.markdown("""
        Les courbes d'apprentissage ci-dessous montrent l'√©volution des m√©triques de **Loss** et **Accuracy** pendant l'entra√Ænement de chaque mod√®le. Ces courbes permettent de visualiser le comportement des mod√®les au fur et √† mesure de l'apprentissage, tant sur l'ensemble d'entra√Ænement que sur l'ensemble de validation.

        - **Courbe de Loss** : Repr√©sente la mesure de l'erreur de pr√©diction du mod√®le au fil des epochs. Une baisse r√©guli√®re de la loss indique que le mod√®le apprend correctement.
        - **Courbe d'Accuracy** : Montre l'√©volution de la pr√©cision du mod√®le. Plus la courbe monte, plus le mod√®le devient performant.

        Les courbes permettent de d√©terminer si le mod√®le est en train de **sous-apprendre** (les deux courbes sont faibles) ou de **sur-apprendre** (forte diff√©rence entre les courbes d'entra√Ænement et de validation).
    """)

    st.markdown("#### Mod√®les MLP")
    mlp_image = Image.open("data/images/mlp_results.png")
    st.image(mlp_image, caption="Courbes d'Apprentissage - Mod√®les MLP", use_container_width=True)

    # Conclusion sur le benchmark
    st.markdown("## Conclusion")
    st.markdown("""
    Apr√®s avoir compar√© les performances des diff√©rents mod√®les, il semble que **ResNet** soit le mod√®le le plus performant, avec une **accuracy** de 0.88 et un **AUC** de 0.88. Toutefois, cela a un co√ªt en termes de temps d'entra√Ænement, qui est relativement √©lev√©.

    Pour des applications o√π la pr√©cision est cruciale, **ResNet** semble √™tre le meilleur choix. Si le temps d'entra√Ænement est une contrainte importante, alors **EfficientNet** offre un bon compromis entre performance et temps d'entra√Ænement.
    """)